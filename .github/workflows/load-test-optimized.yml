name: Load Testing - Enhanced (Quick/1500/Distributed)

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Test Type'
        required: true
        default: 'quick'
        type: choice
        options:
          - quick
          - 1500
          - distributed
      run_locally:
        description: 'Run locally instead of GitHub Actions'
        required: false
        default: false
        type: boolean

jobs:
  quick-test:
    if: github.event.inputs.test_type == 'quick'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm install
      
    - name: Install k6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
        
    - name: Run Quick Test (50 users, 5 minutes)
      run: k6 run load-tests/quick-test.js --out json=quick-results.json
      
    - name: Generate Enhanced Report
      if: always()
      run: node load-tests/enhanced-report-generator.js quick-results.json quick-enhanced-report.html
        
    - name: Upload Quick Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: quick-test-results
        path: |
          quick-results.json
          quick-enhanced-report.html
        retention-days: 30

  1500-test:
    if: github.event.inputs.test_type == '1500'
    runs-on: ubuntu-latest
    timeout-minutes: 35
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm install
      
    - name: Install k6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
        
    - name: Run 1500 Users Test (25 minutes)
      run: k6 run load-tests/optimized-1500-users.js --out json=1500-results.json
      
    - name: Generate Enhanced Report
      if: always()
      run: node load-tests/enhanced-report-generator.js 1500-results.json 1500-enhanced-report.html
        
    - name: Upload 1500 Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: 1500-test-results
        path: |
          1500-results.json
          1500-enhanced-report.html
        retention-days: 30

  distributed-test:
    if: github.event.inputs.test_type == 'distributed'
    runs-on: ubuntu-latest
    timeout-minutes: 35
    strategy:
      matrix:
        instance: [1, 2, 3]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm install
      
    - name: Install k6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
        
    - name: Run Distributed Test Instance ${{ matrix.instance }}
      run: k6 run load-tests/distributed-runner.js --out json=distributed-${{ matrix.instance }}-results.json
      
    - name: Upload Distributed Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: distributed-${{ matrix.instance }}-results
        path: distributed-${{ matrix.instance }}-results.json
        retention-days: 30

  combine-distributed-results:
    if: github.event.inputs.test_type == 'distributed'
    runs-on: ubuntu-latest
    needs: distributed-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Download all distributed results
      uses: actions/download-artifact@v4
      with:
        pattern: distributed-*-results
        merge-multiple: true
        
    - name: Combine distributed results
      run: |
        node load-tests/results-combiner.js
        node load-tests/enhanced-report-generator.js combined-results.json distributed-enhanced-report.html
        
    - name: Upload combined results
      uses: actions/upload-artifact@v4
      with:
        name: distributed-combined-results
        path: |
          combined-results.json
          distributed-enhanced-report.html
        retention-days: 30

  display-summary:
    runs-on: ubuntu-latest
    needs: [quick-test, 1500-test, distributed-test, combine-distributed-results]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Download results
      uses: actions/download-artifact@v4
      with:
        pattern: *-results
        merge-multiple: true
        
    - name: Generate enhanced summary
      run: |
        echo "## ðŸš€ Enhanced Load Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“Š Test Configuration" >> $GITHUB_STEP_SUMMARY
        echo "- **Test Type:** ${{ github.event.inputs.test_type }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Platform:** GitHub Actions" >> $GITHUB_STEP_SUMMARY
        echo "- **Status:** ${{ needs.quick-test.result || needs.1500-test.result || needs.distributed-test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ github.event.inputs.test_type }}" = "quick" ]; then
          echo "### ðŸš€ Quick Test (50 users, 5 minutes)" >> $GITHUB_STEP_SUMMARY
          echo "- **Purpose:** Quick validation and smoke testing" >> $GITHUB_STEP_SUMMARY
          echo "- **Optimized for:** Local & GitHub Actions" >> $GITHUB_STEP_SUMMARY
          echo "- **Enhanced Features:** Interactive charts, performance analysis, recommendations" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ github.event.inputs.test_type }}" = "1500" ]; then
          echo "### ðŸš€ 1500 Users Test (25 minutes)" >> $GITHUB_STEP_SUMMARY
          echo "- **Purpose:** High-load testing" >> $GITHUB_STEP_SUMMARY
          echo "- **Optimized for:** Local (8GB+ RAM) & GitHub Actions" >> $GITHUB_STEP_SUMMARY
          echo "- **Enhanced Features:** Interactive charts, performance analysis, recommendations" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ github.event.inputs.test_type }}" = "distributed" ]; then
          echo "### ðŸš€ Distributed Test (3000 total users, 25 minutes)" >> $GITHUB_STEP_SUMMARY
          echo "- **Purpose:** Distributed high-load testing" >> $GITHUB_STEP_SUMMARY
          echo "- **Optimized for:** GitHub Actions distributed execution" >> $GITHUB_STEP_SUMMARY
          echo "- **Enhanced Features:** Interactive charts, performance analysis, recommendations" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“ˆ Enhanced Reports Available" >> $GITHUB_STEP_SUMMARY
        echo "- **Interactive HTML Report:** Available in artifacts with charts and analysis" >> $GITHUB_STEP_SUMMARY
        echo "- **JSON Results:** Available in artifacts for further analysis" >> $GITHUB_STEP_SUMMARY
        echo "- **Export Options:** PDF and CSV export available in HTML report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ’¡ Enhanced Features" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… **Interactive Charts:** Visual performance metrics" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… **Performance Analysis:** Automatic recommendations" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… **Export Capabilities:** PDF and CSV export" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… **Result Validation:** Automatic test validation" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸŽ¯ Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Download artifacts for detailed analysis" >> $GITHUB_STEP_SUMMARY
        echo "2. Open HTML report for interactive charts and recommendations" >> $GITHUB_STEP_SUMMARY
        echo "3. Export results to PDF or CSV for sharing" >> $GITHUB_STEP_SUMMARY
        echo "4. Review performance recommendations" >> $GITHUB_STEP_SUMMARY 